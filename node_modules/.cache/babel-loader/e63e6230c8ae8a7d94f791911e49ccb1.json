{"ast":null,"code":"var _jsxFileName = \"D:\\\\Front-End Web Development\\\\Exercises\\\\All\\\\REACT\\\\React-App-Food-Delivery\\\\src\\\\components\\\\Products\\\\ProductFood\\\\ProductFood.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport classes from \"./ProductFood.module.scss\";\nimport ProductItem from \"../ProductItem/ProductItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductFood = props => {\n  _s();\n\n  const [food, setFood] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); // Get choosen country from props\n\n  const choosenCountry = props.country; // country name\n\n  const isUserChoose = props.isChooseCategory; // true or false\n\n  useEffect(() => {\n    // Fetch food data from (Firebase)\n    const fetchData = async () => {\n      setIsLoading(true);\n      const response = await fetch(`https://food-delivery-b0655-default-rtdb.firebaseio.com/food/${choosenCountry}.json`);\n      if (!response.ok) throw new Error(\"Fetch food failed!\");\n      const data = await response.json();\n      let loadedData = []; // Handling fetched data and store data in an array.\n\n      for (const key in data) {\n        loadedData.push({\n          id: data[key],\n          name: data[key].foodName,\n          type: data[key].foodType,\n          price: data[key].foodPrice\n        });\n      }\n\n      setFood(loadedData);\n      setIsLoading(false);\n    };\n\n    try {\n      fetchData();\n    } catch (error) {\n      setError(error || \"Something went wrong!\");\n    }\n  }, [choosenCountry]);\n  if (!isUserChoose) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: classes[\"no-items\"],\n    children: \"There are no food items right now.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: classes[\"loading\"],\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: classes[\"error\"],\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 21\n  }, this); // Start Mapping and push the result to ProductItem component.\n\n  const foodItems = food.map(item => /*#__PURE__*/_jsxDEV(ProductItem, {\n    id: item.id,\n    name: item.name,\n    type: item.type,\n    price: item.price\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: classes.products,\n    children: foodItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ProductFood, \"g4P3ukfhSoCG2PpLp9YhQQq1d2U=\");\n\n_c = ProductFood;\nexport default ProductFood;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductFood\");","map":{"version":3,"names":["useEffect","useState","classes","ProductItem","ProductFood","props","food","setFood","isLoading","setIsLoading","error","setError","choosenCountry","country","isUserChoose","isChooseCategory","fetchData","response","fetch","ok","Error","data","json","loadedData","key","push","id","name","foodName","type","foodType","price","foodPrice","foodItems","map","item","products"],"sources":["D:/Front-End Web Development/Exercises/All/REACT/React-App-Food-Delivery/src/components/Products/ProductFood/ProductFood.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport classes from \"./ProductFood.module.scss\";\r\nimport ProductItem from \"../ProductItem/ProductItem\";\r\n\r\nconst ProductFood = (props) => {\r\n  const [food, setFood] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Get choosen country from props\r\n  const choosenCountry = props.country; // country name\r\n  const isUserChoose = props.isChooseCategory; // true or false\r\n\r\n  useEffect(() => {\r\n    // Fetch food data from (Firebase)\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const response = await fetch(\r\n        `https://food-delivery-b0655-default-rtdb.firebaseio.com/food/${choosenCountry}.json`\r\n      );\r\n\r\n      if (!response.ok) throw new Error(\"Fetch food failed!\");\r\n\r\n      const data = await response.json();\r\n\r\n      let loadedData = [];\r\n      // Handling fetched data and store data in an array.\r\n      for (const key in data) {\r\n        loadedData.push({\r\n          id: data[key],\r\n          name: data[key].foodName,\r\n          type: data[key].foodType,\r\n          price: data[key].foodPrice,\r\n        });\r\n      }\r\n      setFood(loadedData);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    try {\r\n      fetchData();\r\n    } catch (error) {\r\n      setError(error || \"Something went wrong!\");\r\n    }\r\n  }, [choosenCountry]);\r\n\r\n  if (!isUserChoose)\r\n    return (\r\n      <p className={classes[\"no-items\"]}>There are no food items right now.</p>\r\n    );\r\n  \r\n  if (isLoading) return <p className={classes[\"loading\"]}>Loading...</p>;\r\n\r\n  if (error) return <p className={classes[\"error\"]}>{error}</p>;\r\n\r\n\r\n  // Start Mapping and push the result to ProductItem component.\r\n  const foodItems = food.map((item) => (\r\n    <ProductItem\r\n      key={item.id}\r\n      id={item.id}\r\n      name={item.name}\r\n      type={item.type}\r\n      price={item.price}\r\n    />\r\n  ));\r\n\r\n  return <ul className={classes.products}>{foodItems}</ul>;\r\n};\r\n\r\nexport default ProductFood;\r\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC,CAH6B,CAK7B;;EACA,MAAMW,cAAc,GAAGP,KAAK,CAACQ,OAA7B,CAN6B,CAMS;;EACtC,MAAMC,YAAY,GAAGT,KAAK,CAACU,gBAA3B,CAP6B,CAOgB;;EAE7Cf,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,SAAS,GAAG,YAAY;MAC5BP,YAAY,CAAC,IAAD,CAAZ;MACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CACzB,gEAA+DN,cAAe,OADrD,CAA5B;MAIA,IAAI,CAACK,QAAQ,CAACE,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;MAElB,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;MAEA,IAAIC,UAAU,GAAG,EAAjB,CAV4B,CAW5B;;MACA,KAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;QACtBE,UAAU,CAACE,IAAX,CAAgB;UACdC,EAAE,EAAEL,IAAI,CAACG,GAAD,CADM;UAEdG,IAAI,EAAEN,IAAI,CAACG,GAAD,CAAJ,CAAUI,QAFF;UAGdC,IAAI,EAAER,IAAI,CAACG,GAAD,CAAJ,CAAUM,QAHF;UAIdC,KAAK,EAAEV,IAAI,CAACG,GAAD,CAAJ,CAAUQ;QAJH,CAAhB;MAMD;;MACDzB,OAAO,CAACgB,UAAD,CAAP;MACAd,YAAY,CAAC,KAAD,CAAZ;IACD,CAtBD;;IAwBA,IAAI;MACFO,SAAS;IACV,CAFD,CAEE,OAAON,KAAP,EAAc;MACdC,QAAQ,CAACD,KAAK,IAAI,uBAAV,CAAR;IACD;EACF,CA/BQ,EA+BN,CAACE,cAAD,CA/BM,CAAT;EAiCA,IAAI,CAACE,YAAL,EACE,oBACE;IAAG,SAAS,EAAEZ,OAAO,CAAC,UAAD,CAArB;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;EAIF,IAAIM,SAAJ,EAAe,oBAAO;IAAG,SAAS,EAAEN,OAAO,CAAC,SAAD,CAArB;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;EAEf,IAAIQ,KAAJ,EAAW,oBAAO;IAAG,SAAS,EAAER,OAAO,CAAC,OAAD,CAArB;IAAA,UAAiCQ;EAAjC;IAAA;IAAA;IAAA;EAAA,QAAP,CAjDkB,CAoD7B;;EACA,MAAMuB,SAAS,GAAG3B,IAAI,CAAC4B,GAAL,CAAUC,IAAD,iBACzB,QAAC,WAAD;IAEE,EAAE,EAAEA,IAAI,CAACT,EAFX;IAGE,IAAI,EAAES,IAAI,CAACR,IAHb;IAIE,IAAI,EAAEQ,IAAI,CAACN,IAJb;IAKE,KAAK,EAAEM,IAAI,CAACJ;EALd,GACOI,IAAI,CAACT,EADZ;IAAA;IAAA;IAAA;EAAA,QADgB,CAAlB;EAUA,oBAAO;IAAI,SAAS,EAAExB,OAAO,CAACkC,QAAvB;IAAA,UAAkCH;EAAlC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAhED;;GAAM7B,W;;KAAAA,W;AAkEN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}