{"ast":null,"code":"var _jsxFileName = \"D:\\\\Front-End Web Development\\\\Exercises\\\\All\\\\REACT\\\\React-App-Food-Delivery\\\\src\\\\components\\\\Products\\\\ProductItem\\\\ProductItem.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useRef } from \"react\";\nimport classes from \"./ProductItem.module.scss\";\nimport FoodContext from \"../../../store/food-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductItem = props => {\n  _s();\n\n  const inputRef = useRef(); //  using Context to store our food-data,\n  //  so that we don't have to fetch it every re-rendered\n\n  const foodCtx = useContext(FoodContext); // Here I used useEffect, because I will store the fetched data in Context,\n  // So I don't have to fetch the same data every re-evaluated.\n\n  useEffect(() => {\n    // Fetch food data from (Firebase)\n    const fetchData = async () => {\n      const response = await fetch(`https://food-delivery-b0655-default-rtdb.firebaseio.com/food.json`);\n      if (!response.ok) throw new Error(\"Fetch food failed!\");\n      const data = await response.json(); // Assign data to our context.\n\n      foodCtx.countries = data;\n    };\n\n    try {\n      fetchData();\n    } catch (error) {\n      throw new Error(error || \"Something went wrong!\");\n    }\n  }, [foodCtx]); // Determine which country has been choosen.\n\n  const countryFood = foodCtx.countries[props.country]; // Convert the choosen country object to an array to map.\n\n  const countriesArray = [];\n\n  for (const key in countryFood) {\n    countriesArray.push(countryFood[key]);\n  }\n\n  const clickAddHandler = event => {\n    console.log(event.target.id);\n    const inputValue = inputRef.current.value;\n    console.log(inputValue);\n  }; // Start Mapping and return the result below.\n\n\n  const foodItems = countriesArray.map(foodItem => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes[\"food-box\"],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes[\"food-info\"],\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: foodItem.foodName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: foodItem.foodType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: `$${foodItem.foodPrice}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes[\"add-to-cart\"],\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"quantityId\",\n        type: \"number\",\n        max: \"20\",\n        min: \"1\",\n        defaultValue: \"1\",\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: clickAddHandler,\n        children: \"+ Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, foodItem.foodPrice, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.products,\n    children: [foodItems.length <= 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes[\"no-items\"],\n      children: \"There are no items right now.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), foodItems.length > 0 && foodItems]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProductItem, \"FHN1GI6+ymccXaAqakwmb5T1a2w=\");\n\n_c = ProductItem;\nexport default ProductItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductItem\");","map":{"version":3,"names":["useContext","useEffect","useRef","classes","FoodContext","ProductItem","props","inputRef","foodCtx","fetchData","response","fetch","ok","Error","data","json","countries","error","countryFood","country","countriesArray","key","push","clickAddHandler","event","console","log","target","id","inputValue","current","value","foodItems","map","foodItem","foodName","foodType","foodPrice","products","length"],"sources":["D:/Front-End Web Development/Exercises/All/REACT/React-App-Food-Delivery/src/components/Products/ProductItem/ProductItem.js"],"sourcesContent":["import { useContext, useEffect, useRef } from \"react\";\r\nimport classes from \"./ProductItem.module.scss\";\r\nimport FoodContext from \"../../../store/food-context\";\r\n\r\nconst ProductItem = (props) => {\r\n  const inputRef = useRef();\r\n\r\n  //  using Context to store our food-data,\r\n  //  so that we don't have to fetch it every re-rendered\r\n  const foodCtx = useContext(FoodContext);\r\n\r\n  // Here I used useEffect, because I will store the fetched data in Context,\r\n  // So I don't have to fetch the same data every re-evaluated.\r\n  useEffect(() => {\r\n    // Fetch food data from (Firebase)\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        `https://food-delivery-b0655-default-rtdb.firebaseio.com/food.json`\r\n      );\r\n\r\n      if (!response.ok) throw new Error(\"Fetch food failed!\");\r\n\r\n      const data = await response.json();\r\n\r\n      // Assign data to our context.\r\n      foodCtx.countries = data;\r\n    };\r\n\r\n    try {\r\n      fetchData();\r\n    } catch (error) {\r\n      throw new Error(error || \"Something went wrong!\");\r\n    }\r\n  }, [foodCtx]);\r\n\r\n  // Determine which country has been choosen.\r\n  const countryFood = foodCtx.countries[props.country];\r\n\r\n  // Convert the choosen country object to an array to map.\r\n  const countriesArray = [];\r\n  for (const key in countryFood) {\r\n    countriesArray.push(countryFood[key]);\r\n  }\r\n\r\n  const clickAddHandler = (event) => {\r\n    console.log(event.target.id);\r\n    \r\n    const inputValue = inputRef.current.value;\r\n    \r\n    console.log(inputValue);\r\n  };\r\n\r\n\r\n  // Start Mapping and return the result below.\r\n  const foodItems = countriesArray.map((foodItem) => (\r\n    <div key={foodItem.foodPrice} className={classes[\"food-box\"]}>\r\n      <div className={classes[\"food-info\"]}>\r\n        <h4>{foodItem.foodName}</h4>\r\n        <h6>{foodItem.foodType}</h6>\r\n        <span>{`$${foodItem.foodPrice}`}</span>\r\n      </div>\r\n\r\n      <form className={classes[\"add-to-cart\"]}>\r\n        <input id=\"quantityId\" type=\"number\" max=\"20\" min=\"1\" defaultValue=\"1\" ref={inputRef} />\r\n        <button type='submit' onClick={clickAddHandler}>\r\n          + Add\r\n        </button>\r\n      </form>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div className={classes.products}>\r\n      {foodItems.length <= 0 && (\r\n        <p className={classes[\"no-items\"]}>There are no items right now.</p>\r\n      )}\r\n      {foodItems.length > 0 && foodItems}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}